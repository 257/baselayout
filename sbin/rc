#!/bin/bash

if [ -z "$1" ]
then
	export SOFTLEVEL="`cat /dev/shm/.init.d/softlevel`"
else
	export SOFTLEVEL=$1
fi
svcdir=/dev/shm/.init.d

if [ "$SOFTLEVEL" = "reboot" ] || [ "$SOFTLEVEL" = "shutdown" ]
then
	myscripts=""
elif [ ! -d /etc/runlevels/${SOFTLEVEL} ]
then
	echo "runlevel ${SOFTLEVEL} does not exist; exiting."
	exit 1
else
	myscripts=""
	if [ "$SOFTLEVEL" != "boot" ]
	then
		#normal runlevels *include* boot scripts
		mylevels="/etc/runlevels/${SOFTLEVEL}/* /etc/runlevels/boot/*"
	else
		#non-normal runlevels don't include boot scripts as default
		mylevels="/etc/runlevels/${SOFTLEVEL}/*"
	fi
	for x in $mylevels 
	do
		if [ -L $x ]
		then
			myscripts="$myscripts ${x##*/}"
		fi
	done
fi

#the softscripts dir contains all scripts that belong to the
#runlevel specified in ${svcdir}/softlevel
#it needs to be a new directory, else when stopping the services
#and the old directory is not intact, things get broken

install -d -m0755 ${svcdir}/softscripts.new

for x in $myscripts
do
	if [ ! -e /etc/init.d/${x} ]
	then
		echo "skipping, /etc/init.d/${x} missing"
		continue
	fi
	#the -f eliminates a warning if the symlink already exists, 
	#which can happen if a service is in both the boot level and
	#the current "normal" runlevel
	ln -sf /etc/init.d/${x} ${svcdir}/softscripts.new/${x}
done

#stop services
for i in ${svcdir}/started/*
do
	[ ! -L ${i} ] && continue
	if [ ! -e ${i} ]
	then
		#remove dud symlinks
		rm ${i}
		continue
	fi
	myservice=${i##*/}
	
	if [ ! -L ${svcdir}/softscripts.new/${myservice} ]
	then
		#candidate for zapping
		
		if [ ! -d ${svcdir}/need/${myservice} ] && [ ! -d ${svcdir}/use/${myservice} ]
		then
			#nothing depends on me
			${i} stop
		else
			#something may depend on me
			needsme=0
			for mytype in need use
			do
				for dep in ${svcdir}/${mytype}/${myservice}/*
				do
					if [ -L /${svcdir}/softscripts.new/${dep##*/} ]
					then
						#this dep is valid
						needsme=1
						break
					fi
				done
			done
			if [ $needsme -eq 0 ]
			then
				${i} stop
			fi
		fi
	fi
done

# Only change softlevel AFTER all the services have been stopped,
# else they will not get the depend's right (wrong SOFTLEVEL)
echo $SOFTLEVEL > /dev/shm/.init.d/softlevel

if [ "$SOFTLEVEL" = "reboot" ] || [ "$SOFTLEVEL" = "shutdown" ]
then
	source /etc/init.d/functions.sh
	source /etc/init.d/halt.sh
	if [ "$SOFTLEVEL" = "reboot" ]
	then
		source /etc/init.d/reboot.sh 
	else
		source /etc/init.d/shutdown.sh
	fi
fi

#clean out directory to remove traces of previous runlevel
#and make the new softscripts directory the current
rm -rf ${svcdir}/softscripts
mv ${svcdir}/softscripts.new/ ${svcdir}/softscripts

#start scripts
for i in ${svcdir}/softscripts/* 
do
	if [ ! -L $i ]
	then
		continue
	fi
	#only start a script if it isn't already running
	if [ ! -L ${svcdir}/started/${i##*/} ]
	then
		$i start
	fi
done

#depends gets newked, so update them
#(this problem should be solved now, but i think it will be a good idea
# to recreate the deps after a change in runlevel)
/etc/init.d/depscan.sh >/dev/null 2>/dev/null

#we want devfsd running after a change of runlevel (this is mostly if we return
#from runlevel 'single')
if [ "`cat /proc/mounts | grep '/dev devfs'`" ] && [ ! "`ps -A |grep devfsd`" ]
then
	/sbin/devfsd /dev >/dev/null 2>&1
fi

#if we were in the boot runlevel, it is done now ...
[ -n "$BOOT" ] && unset BOOT

