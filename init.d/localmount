#!/sbin/runscript
# Copyright 1999-2006 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2

depend() {
	need checkfs
}

start() {
	# Mount local filesystems in /etc/fstab.
	local types="noproc,linproc,shm${NET_FS_LIST:+,}${NET_FS_LIST// /,}"
	ebegin $"Mounting local filesystems"
	mount -at "${types}"
	eend $? $"Some local filesystem failed to mount"

	# Change the mount options of already mounted paritions
	# This is needed when /usr is separate and coming back from single user
	if [[ $(uname) != "Linux" ]] ; then
		mount -uao fstab -t "${types}"
	fi

	# Sync bootlog now as /var should be mounted
	bootlog sync 2>/dev/null

	# Make sure we insert usbcore if its a module
	if [[ -f /proc/modules && ! -d /proc/bus/usb ]] ; then
		# >/dev/null to hide errors from non-USB users
		modprobe usbcore &> /dev/null
	fi

	if [[ -e /proc/filessystems ]] ; then
		# Check what USB fs the kernel support.  Currently
		# 2.5+ kernels, and later 2.4 kernels have 'usbfs',
		# while older kernels have 'usbdevfs'.
		local usbfs=$(grep -Fow usbfs /proc/filesystems ||
			grep -Fow usbdevfs /proc/filesystems)

		if [[ -n ${usbfs} ]] && \
		   [[ -e /proc/bus/usb && ! -e /proc/bus/usb/devices ]] ; then
			ebegin $"Mounting USB device filesystem" "(${usbfs})"
			usbgid=$(echo $(getent group usb) | awk -F: '{print $3}')
			mount -t ${usbfs} usbfs /proc/bus/usb \
				-o ${usbgid:+devmode=0664,devgid=${usbgid},}noexec,nosuid
			eend $? $"Failed to mount USB device filesystem"
		fi

		# Setup Kernel Support for miscellaneous Binary Formats
		local binfmt=$(grep -Fow binfmt_misc /proc/filesystems)
		if [[ -n ${binfmt} && -e /proc/sys/fs/binfmt_misc ]] ; then
			ebegin $"Mounting misc binary format filesystem"
			mount -t binfmt_misc binfmt_misc \
				/proc/sys/fs/binfmt_misc \
				-o nodev,noexec,nosuid
			eend $?
		fi
	fi

	# We do our swapping here instead of rc so we can get urandom started
	# before us for people that like an encrypted swap.
	ebegin $"Activating (possible) swap"
	swapon -a >/dev/null
	eend 0 # If swapon has nothing todo it errors, so always return 0 

	# Start dm-crypt mappings, if any
	start_addon dm-crypt

	# Always return 0 - some local mounts may not be critical for boot
	return 0
}

# Handy function to handle all our unmounting needs
# get_mounts is our portable function to get mount information
do_unmount() {
	local cmd="$1" no_unmounts="$2" nodes="$3"
	local l= fs= node= point= foo= fuser_opts="-m -c" pids= pid=
	[[ $(uname) == "Linux" ]] && fuser_opts="-c"

	get_mounts | sort -ur | while read point node fs foo ; do
		point=${point//\040/ }
		node=${node//\040/ }
		fs=${fs//\040/ }
		[[ -n ${no_unmounts} && ${point} =~ ${no_unmounts} ]] && continue
		[[ -n ${nodes} && ! ${node} =~ ${nodes} ]] && continue

		if [[ ${cmd} == "umount"* ]] ; then
			# If we're using the mount (probably /usr) then don't unmount us
			if [[ " $(fuser ${fuser_opts} "${point}" 2>/dev/null) " == *" $$ "* ]] ; then
				ewarn "We are using ${point}, not unmounting"
				continue
			fi
		fi

		ebegin "Unmounting ${point}"
		declare -a siglist=( "TERM" "KILL" "KILL" )
		retry=0
		while ! ${cmd} "${point}" &>/dev/null ; do
			# Don't kill if it's us (/ and possibly /usr)
			if [[ " $(fuser ${fuser_opts} "${point}" 2>/dev/null) " != *" $$ "* ]] ; then
				fuser -"${siglist[${retry}]}" -k ${fuser_opts} "${point}" &>/dev/null
				sleep 2
			else
				# No point in trying again, save time
				retry=3
			fi
			((retry++))

			# OK, try forcing things
			if [[ ${retry} -ge 2 ]] ; then
				${cmd} -f "${point}" || retval=1
				break
			fi
		done
	done
	eend ${retval}
	return ${retval}
}

stop() {
	# We never unmount / or /dev or $svcdir
	NO_UMOUNTS="/|/dev|${svcdir}${NO_UMOUNTS:+|}${NO_UMOUNTS// /|}"
	[[ $(uname) == "Linux" ]] && NO_UMOUNTS="${NO_UMOUNTS}|/dev/pts|/proc|/sys"
	NO_UMOUNTS="^(${NO_UMOUNTS})$"

	# Flush all pending disk writes now
	sync ; sync

	# Try to unmount all tmpfs filesystems not in use, else a deadlock may
	# occure, bug #13599.
	# As $svcdir may also be tmpfs we cd to it to lock it
	cd "${svcdir}"
	umount -a -t tmpfs &>/dev/null

	# Turn off swap
	if [[ -x /sbin/swapctl ]] ; then
		swap_list=$(swapctl -l 2>/dev/null | sed -e '1d')
	else
		swap_list=$(swapon -s 2>/dev/null | sed -e '1d')
	fi
	if [[ -n ${swap_list} ]] ; then
		ebegin $"Deactivating swap"
		swapoff -a >/dev/null
		eend $?
	fi

	# Umount loopback devices
	ebegin $"Unmounting loopback devices"
	do_unmount "umount -d" "${NO_UMOUNTS}" "^/dev/loop"
	eend $?

	# Now everything else
	ebegin $"Unmounting filesystems"
	eindent
	do_unmount "umount" "${NO_UMOUNTS}"
	eoutdent
	eend $?

	return 0
}

# vim: set ts=4 :
