# DHCP (net-misc/dhcp) module for net-scripts
# Version 1.0.5
# Copyright (c) 2004 Gentoo Foundation
# Distributed under the terms of the GNU General Public License V2
# Contributed by Roy Marples (uberlord@gentoo.org)

# Fix any potential localisation problems
# Note that LC_ALL trumps LC_anything_else according to locale(7)
dhclient() {
	LC_ALL=C /sbin/dhclient "$@"
}

# char* dhclient_provides(void)
#
# Returns a string to change module definition for starting up
dhclient_provides() {
	echo "dhcp"
}

# void dhclient_depend(void)
#
# Sets up the dependancies for the module
dhclient_depend() {
	after interface
	need interface
}

# bool dhclient_check_installed(void)
#
# Returns 1 if dhclient is installed, otherwise 0
dhclient_check_installed() {
	[[ -x /sbin/dhclient ]] && return 0
	${1:-false} && eerror "For DHCP (dhclient) support, emerge net-misc/dhcp"
	return 1
}

# char* dhclient_get_script(void)
#
# Returns the filename of the script to run
dhclient_get_script() {
	local module=$( interface_module )
	echo "${MODULES_DIR}/helpers.d/dhclient-${module}"
}

# bool dhclient_check_depends(void)
#
# Checks to see if we have the needed functions
dhclient_check_depends() {
	local f

	for f in interface_variable interface_device interface_is_up interface_get_address interface_module; do
		[[ $( type -t ${f} ) == function ]] && continue
		eerror "dhclient: missing required function ${f}\n"
		return 1
	done

	return 0
}

# char* dhclient_get_vars(char *interface)
#
# Returns a string spaced with possible user set
# configuration variables
dhclient_get_vars() {
	echo "dhclient_${1} peer_dns_${1} peer_nis_${1} peer_ntp_${1}"
}

# bool dhclient_stop(char *iface)
#
# Stop dhclient on an interface
# Always returns 0
dhclient_stop() {
	local iface=${1} count opts release pidfile="/var/run/dhclient-${1}.pid"
	
	dhclient_check_installed || return 0
	[[ ! -f ${pidfile} ]] && return 0

	# We check for a dhclient process first as if we attempt to release
	# an interface for which dhclient has obtained an IP in the past
	# it causes a "RELEASE" event anyway.
	local pid=$( cat ${pidfile} )
	local script=$( dhclient_get_script )

	eval release=\"\$\{dhcp_release_${ifvar}\}\"
	[[ -z ${release} ]] && eval release=\"\$\{dhcp_release\}\"
	[[ ${release} == yes ]] && opts="-r"

	ebegin "Stopping dhclient on ${iface}"
	local r=$( dhclient -q ${opts} -sf ${script} -pf ${pidfile} ${iface} )
	[[ ${r} == deconfig ]]
	eend $? "dhclient returned a ${r}"
	return 0
}

# bool dhclient_start(char *iface)
#
# Start DHCP on an interface by calling dhclient $iface $options
#
# Returns 0 (true) when a DHCP address is obtained, otherwise 1
dhclient_start() {
	local iface=${1} opts pidfile="/var/run/dhclient-${1}.pid"
	local ifvar=$( interface_variable ${iface} )

	interface_exists ${iface} true || return 1

	# Check that iface was not brought up by the kernel ...
	local check=$( interface_device ${iface} )
	if [[ ${check} == ${iface} ]] && interface_is_up ${iface} true ; then
		einfo "Keeping kernel configuration for ${iface}"
		return 0
	fi

	local script=$( dhclient_get_script )

	# Bring up DHCP for this interface (or alias)
	ebegin "Running dhclient"

	if ! clean_pidfile ${pidfile} ; then
		ewarn "dhclient is already running on ${iface}"
		eend 0
		return 0
	fi

	eval opts=\"\$\{dhclient_${ifvar}\}\"
	local r=$( dhclient ${opts} -sf ${script} -pf ${pidfile} -q ${iface} )
	# We just check the last 5 letters
	[[ ${r:${#r} - 5:5} == bound ]]
	eend $? || return 1

	# DHCP succeeded, show address retrieved
	local addr=$( interface_get_address ${iface} )
	einfo "${iface} received address ${addr}"

	return 0
}
