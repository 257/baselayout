# config-system module for net-scripts
# Version 1.0.3
# Copyright (c) 2004 Gentoo Foundation
# Distributed under the terms of the GNU General Public License V2
# Contributed by Roy Marples (uberlord@gentoo.org)

source /etc/conf.d/net

get_wireless_vars() {
	netdir=/lib/rcscripts/net.modules.d

	# Check that wireless has not already been configured
	[[ $(type -t wireless_check_extensions) == function ]] && return

	# Check we can actually load the file
	# and our calling dhcp module
	[[ ! -f ${netdir}/iwconfig || ! -f ${netdir}/essidnet || ! -f ${netdir}/${module} ]] && return

	# Setup the devnull var as we probably aren't being called via net.lo
	[[ -z ${devnull} ]] && local devnull=/dev/stderr

	source ${netdir}/iwconfig
	local x
	for x in $( typeset -f | grep -o ^iwconfig_'[^ ]*' ); do
		eval "wireless${x#iwconfig}() { ${x} \"\$@\"; }"
	done

	# Check we are installed
	wireless_check_installed || return

	# Check we are a wireless interface
	wireless_check_extensions ${interface} || return

	# Wait until we get a valid ESSID
	ESSID=$( wireless_get_essid ${interface} )

	local -a MODULES=( "${module}" )
	source ${netdir}/${module}
	source ${netdir}/essidnet

	essidnet_pre_start ${interface}
}

# This routine configures the local host for non-ip and routing info
# from a DHCP client
config_system() {			
	
	# Load our wireless mapped vars
	# For example peer_dns_ESSID becomes peer_dns_eth0
	get_wireless_vars

	local x=$( hostname ) peer
	[[ -n ${hostname} && ${x} != ${hostname} ]] && hostname ${new_host_name} >/dev/null

	local ifvar=$( interface_variable ${interface} )

	eval peer=\"\$\{peer_dns_${ifvar}\}\"
	[[ -z ${peer} ]] && eval peer=\"\$\{peer_dns\}\"
	peer=${peer:-yes}

	if [[ ${peer} != no ]] && [[ -n ${domain} || -n ${dns} ]]; then
		[[ -f /etc/resolv.conf ]] && mv /etc/resolv.conf /etc/resolv.conf.sv

		echo "# generated automatically by net-scripts" > /etc/resolv.conf
		chmod 644 /etc/resolv.conf
		[[ -n ${domain} ]] && echo "domain ${domain}" >> /etc/resolv.conf

		for x in ${dns}; do
			echo "nameserver ${x}" >>/etc/resolv.conf
		done
	fi

	eval peer=\"\$\{peer_ntp_${ifvar}\}\"
	[[ -z ${peer} ]] && eval peer=\"\$\{peer_ntp\}\"
	peer=${peer:-yes}

	if [[ ${peer} != no && -n ${ntpsrv} ]]; then
		[[ -f /etc/ntp.conf ]] && mv /etc/ntp.conf /etc/ntp.conf.sv
		echo "# generated automatically by net-scripts" > /etc/ntp.conf
		chmod 644 /etc/ntp.conf

		echo "restrict default noquery notrust nomodify" >> /etc/ntp.conf
		echo "restrict 127.0.0.1" >> /etc/ntp.conf
		echo "driftfile /var/lib/ntp/ntp.drift" >> /etc/ntp.conf

		for x in ${ntpsrv}; do
			echo "restrict ${x} nomodify notrap noquery" >> /etc/ntp.conf
			echo "server ${x}" >> /etc/ntp.conf
		done
	fi

	eval peer=\"\$\{peer_nis_${ifvar}\}\"
	[[ -z ${peer} ]] && eval peer=\"\$\{peer_nis\}\"
	peer=${peer:-yes}

	if [[ ${peer} != no ]] && [[ -n ${nisdomain} || -n ${nissrv} ]]; then
		[[ -f /etc/yp.conf ]] && mv /etc/yp.conf /etc/yp.conf.sv
		echo "# generated automatically by net-scripts" > /etc/yp.conf
		chmod 644 /etc/yp.conf
		if [[ -n ${nisdomain} ]]; then
			hostname -y ${nisdomain}
			if [[ -n ${nissrv} ]]; then
				for x in ${nissrv}; do
					echo "domain ${nisdomain} server ${x}" >> /etc/yp.conf
				done
			else
				echo "domain ${nisdomain} broadcast" >> /etc/yp.conf
			fi
		else
			for x in ${nissrv}; do
				echo "ypserver ${x}" >> /etc/yp.conf
			done
		fi
	fi

}
