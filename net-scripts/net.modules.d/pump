#!/bin/bash
# Copyright (c) 2004-2005 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2

# Contributed by Roy Marples (uberlord@gentoo.org)

# Fix any potential localisation problems
# Note that LC_ALL trumps LC_anything_else according to locale(7)
pump() {
    LC_ALL=C /sbin/pump "$@"
}

# char* pump_provides(void)
#
# Returns a string to change module definition for starting up
pump_provides() {
    echo "dhcp"
}

# void pump_depend(void)
#
# Sets up the dependancies for the module
pump_depend() {
    after interface
}

# bool pump_check_installed(void)
#
# Returns 1 if pump is installed, otherwise 0
pump_check_installed() {
    [[ -x /sbin/pump ]] && return 0
    ${1:-false} && eerror "For DHCP (pump) support, emerge net-misc/pump"
    return 1
}

# bool pump_check_depends(void)
#
# Checks to see if we have the needed functions
pump_check_depends() {
    local f

    for f in interface_exists interface_get_address; do
	[[ $( type -t ${f} ) == "function" ]] && continue
	eerror "pump: missing required function ${f}\n"
	return 1
    done

    return 0
}

# char* pump_get_vars(char *interface)
#
# Returns a string spaced with possible user set
# configuration variables
pump_get_vars() {
    echo "pump_$1 dhcp_$1"
}

# bool pump_stop(char *iface)
#
# Stop pump on an interface
# Return 0 if pump is not running or we stop it successfully
# Otherwise 1
pump_stop() {
    local iface="$1" count e

    pump_check_installed || return 0

    # We check for a pump process first as querying for status
    # causes pump to spawn a process
    pidof /sbin/pump &>/dev/null || return 0

    # Check that pump is running on the interface
    pump --status --interface "${iface}" 2>/dev/null \
	| grep -q "^Device ${iface}" || return 0

    # Pump always releases the lease
    ebegin "Stopping pump on ${iface}"
    pump --release --keep-up --interface "${iface}"
    eend $? "Failed to stop pump"
    return $?
}

# bool pump_start(char *iface)
#
# Start pump on an interface by calling pumpcd $iface $options
#
# Returns 0 (true) when a dhcp address is obtained, otherwise
# the return value from pump
pump_start() {
    local iface="$1" opts d ifvar=$( bash_variable "$1" )

    interface_exists "${iface}" true || return 1

    eval opts=\" \$\{pump_${ifvar}\} \"

    # Map some generic options to pump
    eval d=\" \$\{dhcp_${ifvar}\} \"
    [[ ${d} == "  " ]] && d=" ${dhcp} "
    [[ ${d} == *" nodns "* ]] && opts="${opts} --no-dns"
    [[ ${d} == *" nogateway "* ]] && opts="${opts} --no-gateway"
    [[ ${d} == *" nontp "* ]] && opts="${opts} --no-ntp"

    # Add our route metric
    eval metric=\"\$\{metric_${ifvar}\}\"
    [[ -n ${metric} ]] && opts="${opts} --route-metric ${metric}"

    [[ ! -d "${statedir}/${iface}" ]] && mkdir -p "${statedir}/${iface}"

    opts="${opts} --win-client-ident --etc-dir=${statedir}/${iface}"
    opts="${opts} --script /lib/rcscripts/net.modules.d/helpers.d/pump-wrapper"
    opts="${opts} --interface ${iface}"
    
    # Bring up DHCP for this interface (or alias)
    ebegin "Running pump"

    if [[ ${background} == "yes" ]]; then
	eval pump ${opts} &
	eend 0
	go_background
    fi
   
    eval pump ${opts}
    eend $? || return $?

    # pump succeeded, show address retrieved
    local addr=$( interface_get_address "${iface}" )
    einfo "${iface} received address ${addr}"

    return 0
}
