# DHCP (net-misc/dhcpcd) module for net-scripts
# Version 1.0.5
# Copyright (c) 2004 Gentoo Foundation
# Distributed under the terms of the GNU General Public License V2
# Contributed by Roy Marples (uberlord@gentoo.org)

# Fix any potential localisation problems
# Note that LC_ALL trumps LC_anything_else according to locale(7)
dhcpcd() {
	LC_ALL=C /sbin/dhcpcd "$@"
}

# char* dhcpcd_provides(void)
#
# Returns a string to change module definition for starting up
dhcpcd_provides() {
	echo "dhcp"
}

# void dhcpcd_depend(void)
#
# Sets up the dependancies for the module
dhcpcd_depend() {
	after interface
	need interface
}

# bool dhcpcd_check_installed(void)
#
# Returns 1 if dhcpcd is installed, otherwise 0
dhcpcd_check_installed() {
	[[ -x /sbin/dhcpcd ]] && return 0
	${1:-false} && eerror "For DHCP (dhcpcd) support, emerge net-misc/dhcpcd"
	return 1
}

# bool dhcpcd_check_depends(void)
#
# Checks to see if we have the needed functions
dhcpcd_check_depends() {
	local f

	for f in interface_variable interface_device interface_is_up interface_get_address; do
		[[ $( type -t ${f} ) == function ]] && continue
		eerror "dhcpcd: missing required function ${f}\n"
		return 1
	done

	return 0
}

# char* dhcpcd_get_vars(char *interface)
#
# Returns a string spaced with possible user set
# configuration variables
dhcpcd_get_vars() {
	echo "dhcpcd_${1} peer_dns_${1} peer_nis_${1} peer_ntp_${1}"
}

# bool dhcpcd_stop(char *iface)
#
# Stop DHCP on an interface by calling dhcpcd -z $iface
#
# Returns 0 (true) when a DHCP address dropped
# otherwise return 1
dhcpcd_stop() {
	local iface=${1} count signal pidfile="/var/run/dhcpcd-${1}.pid"
	
	dhcpcd_check_installed || return 0

	[[ ! -f ${pidfile} ]] && return 0

	ebegin "Stopping dhcpcd on ${iface}"
	local ifvar=$( interface_variable ${1} )
	local pid=$( cat ${pidfile} )

	eval release=\"\$\{dhcp_release_${ifvar}\}\"
	[[ -z ${release} ]] && eval release=\"\$\{dhcp_release\}\"
	[[ ${release} == yes ]] && signal="HUP"
	signal="TERM"

	kill -s ${signal} ${pid} &>${devnull}
	process_finished ${pid} dhcpcd
	eend $? "timed out"
	return $?
}

# bool dhcpcd_start(char *iface)
#
# Start DHCP on an interface by calling dhcpcd $iface $options
#
# Returns 0 (true) when a DHCP address is obtained, otherwise 1
dhcpcd_start() {
	local iface=${1} opts hostname pidfile="/var/run/dhcpcd-${1}.pid"
	local ifvar=$( interface_variable ${iface} )

	interface_exists ${iface} true || return 1

	local check=$( interface_device ${iface} )

	# Check that iface was not brought up by the kernel ...
	if [[ ${check} == ${iface} ]] && interface_is_up ${iface} true ; then
		einfo "Keeping kernel configuration for ${iface}"
		return 0
	fi		

	# Get our options
	eval opts=\"\$\{dhcpcd_${ifvar}\}\"

	# Map some generic options to dhcpcd
	eval peer=\"\$\{dhcp_dns_${ifvar}\}\"
	[[ -z ${peer} ]] && eval peer=\"\$\{dhcp_dns\}\"
	[[ ${peer} == no ]] && opts="-R ${opts}"

	eval peer=\"\$\{dhcp_nis_${ifvar}\}\"
	[[ -z ${peer} ]] && eval peer=\"\$\{dhcp_nis\}\"
	[[ ${peer} == no ]] && opts="-Y ${opts}"

	eval peer=\"\$\{dhcp_ntp_${ifvar}\}\"
	[[ -z ${peer} ]] && eval peer=\"\$\{dhcp_ntp\}\"
	[[ ${peer} == no ]] && opts="-N ${opts}"

	# We transmit the hostname by default
	if [[ ${opts} != *'-h '* ]]; then
		hostname=$( hostname )
		[[ -n ${hostname} && ${hostname} != "(none)" ]] && opts="-h ${hostname} ${opts}"
	fi

	# Bring up DHCP for this interface (or alias)
	ebegin "Running dhcpcd"

	if ! clean_pidfile ${pidfile} ; then
		ewarn "dhcpcd is already running on ${iface}"
		eend 0
		return 0
	fi

	dhcpcd ${opts} ${iface}
	eend $? || return 1

	# DHCP succeeded, show address retrieved
	local addr=$( interface_get_address ${iface} )
	einfo "${iface} received address ${addr}"

	return 0
}
