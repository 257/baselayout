#!/sbin/runscript
# net-scripts main code
# Copyright 2004 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# Contributed by Roy "UberLord" Marples <uberlord@rsm.demon.co.uk>
# $Header$
#
# Based on code from Gentoo Linux /etc/init.d/net.eth0 version 1.45

#NB: Config is in /etc/conf.d/net

if [[ -n $NET_DEBUG ]]; then
	set -x
	devnull=/dev/stderr
else
	devnull=/dev/null
fi

# For pcmcia users. note that pcmcia must be added to the same
# runlevel as the net.* script that needs it.
depend() {
	use hotplug pcmcia usb bridge
}

# void modules_sort_before(void)
#
# Sorts our modules array based on the "before" array
modules_sort_before() {
	local i up j k p

	# Now we sort the modules by before/after arrays
	for ((i = ${#MODULES[@]} - 1; i >= 0; i--)); do
		[[ function != $( type -t ${MODULES[i]}_before ) ]] && continue
		for up in $( ${MODULES[i]}_before | sort ); do
			for ((j = 0; j < i; j ++)); do
				[[ ${up} != ${MODULES[j]} && ${up} != $( ${MODULES[j]}_provides ) ]] && continue
				p=${MODULES[i]}
				for ((k = i; k > j; k--)); do
					MODULES[k]=${MODULES[k - 1]}
				done
				MODULES[j]=${p}
				modules_sort_before
			done
		done
	done
	return 0
}

# void modules_sort_after(void)
#
# Sorts our modules array based on the "after" array
modules_sort_after() {
	local i up j k p

	for ((i = 0; i < ${#MODULES[@]}; i++)); do
		[[ function != $( type -t ${MODULES[i]}_after ) ]] && continue
		for up in $( ${MODULES[i]}_after | sort -r ); do
			for ((j = ${#MODULES[@]} - 1; j >= i; j --)); do
				[[ ${up} != ${MODULES[j]} && ${up} != $( ${MODULES[j]}_provides ) ]] && continue
				p=${MODULES[i]}
				for ((k = i; k < j; k++)); do
					MODULES[k]=${MODULES[k + 1]}
				done
				MODULES[j]=${p}
				modules_sort_after
				return 1
			done
		done
	done
	return 0
}

# bool modules_load(char *iface, bool all)
#
# Loads the defined handler and modules for the interface
# Returns 0 on success, otherwise 1
modules_load() {
	local iface=${1} all=${2:-false} i j p um e before after diffs
	local -a mods=( $( find /etc/net.modules.d/ -type f | sort ) ) umods

	[[ lo != ${iface} ]] && ebegin "Loading networking scripts"

	# Each of these sources into the global namespace, so it's
	# important that module functions and variables are prefixed with
	# the module name, for example iproute2_
	before=$( typeset -f )
	for ((i = 0; i < ${#mods[@]}; i++ )); do
		source ${mods[i]} || {
 			eerror "${mods[i]##*/} failed a sanity check - will not load"
 			unset mods[i]
 			continue
		}
		mods[i]=${mods[i]##*/}

 		if [[ interface == ${mods[i]} ]]; then
 			eerror "interface is a reserved name - cannot load a module called interface"
 			return 1
 		fi

		for e in check_installed provides check_depends; do
			[[ function == $(type -t ${mods[i]}_${e}) ]] && continue
			eerror "${mods[i]} does not support the required function ${e}"
			return 1
		done

		# Double check that we've only *added* to the function list, not
		# replaced.  This is as much protection for devs as for users ;-)
		after=$( typeset -f )
		if [[ ${#after} -lt ${#before} ]]; then
			# Thought diffutils is in the profiles, don't depend that it will exist
			diffs=$(diff <(echo "${before}") <(echo "${after}") 2>/dev/null | \
				awk '$1=="<" && $3=="()" {print $2}' | xargs)
			if [[ -n ${diffs} ]]; then
				ewarn "Warning: ${mods[i]} modified functions: ${diffs}"
			fi
		fi
		before="${after}"
	done
 	# Squash the array
 	mods=( "${mods[@]}" )

	# We need this to be in a separate loop
	for ((i = 0; i < ${#mods[@]}; i++ )); do
		${mods[i]}_check_installed || unset mods[i]
	done
	# Squash the array
	mods=( "${mods[@]}" )

	if ${all}; then
		# Has the interface got any specific modules?
		eval umods=( \"\$\{modules_${iface}\[@\]\}\" )

		# If not then has a global setting been made?
		[[ -z ${umods} ]] && eval umods=( \"\$\{modules\[@\]\}\" )

		umods=( "${umods[@]}" "ifconfig" "dhcpcd" )

		# First we strip any modules that conflict from user settings
		# So if the user specifies pump then we don't use dhcpcd
		for ((i = 0; j < ${#umods[@]}; i++ )); do
			[[ function != $( type -t ${umods[i]}_provides ) ]] && {
				eerror "${umods[i]} is not a valid module (missing provides)"
				return 1
			}
			[[ " ${mods[*]} " != *" ${umods[i]} "* ]] && ewarn "xx"
			for ((j = 0; j < ${#mods[@]}; j++ )); do
				[[ function != $( type -t ${mods[j]}_provides ) ]] && continue
				if [[ $( ${mods[j]}_provides ) == $( ${umods[i]}_provides ) && ${umods[i]} != ${mods[j]} ]]; then
					unset mods[j]
					mods=( "${mods[@]}" )
					break;
				fi
			done
		done
	
		# Then we strip conflicting modules
		for ((i = 0; i < ${#mods[@]} - 1; i++)); do
			for ((j = i + 1; j < ${#mods[@]}; j++ )); do
				[[ $( ${mods[i]}_provides ) == $( ${mods[j]}_provides ) ]] && unset mods[j]
			done
			mods=( "${mods[@]}" )
		done
	fi

	# Setup class wrappers: interface_up -> iproute2_up, for example
	for i in ${mods[@]}; do
		p=$( ${i}_provides )
		[[ ${p} == ${i} ]] && continue;
		for j in $(typeset -f | grep -o ^${i}_'[^ ]*' ); do
			eval "${p}${j#${i}}() { ${j} \"\$@\"; }"
		done
	done

	MODULES=( "${mods[@]}" )
	# Our sort routine is a bit slow - but it works :)
	while [[ true ]]; do
		modules_sort_before && modules_sort_after && break
	done

	[[ lo != ${iface} ]] && einfo "  modules: ${MODULES[@]}"

	# Ensure that all modules have what they need
	# from either other modules or the system
	for i in ${MODULES[@]}; do
		${i}_check_depends || return 1
		e=$( ${i}_provides )
		if [[ true != ${all} && lo != ${iface} && ${e} != ${i} ]]; then
			einfo "    ${i} provides ${e}"
		fi
	done
}

# char* get_device(char *iface)
#
# Gets the base device of the interface
# Can handle eth0:1 and eth0.1
# Which returns eth0 in this case
get_device() {
	local iface=${1}
	local dev=${iface%%.*}
	[[ ${dev} == ${iface} ]] && dev=${iface%%:*}
	echo ${dev}
}

# bool iface_start(char *interface)
#
# iface_start is called from start.  It's expected to start the base
# interface (for example "eth0"), aliases (for example "eth0:1") and to start
# VLAN interfaces (for example eth0.0, eth0.1).  VLAN setup is accomplished by
# calling itself recursively.
iface_start() {
	local iface=${1} mod i label x conf

	# Localise and initialise variables
	for mod in ${MODULES[@]}; do
		x="${mod}_local_vars"
		if [[ function == $( type -t ${x} ) ]]; then
			x=$( ${x} )
			${x}
		fi
		x="${mod}_setup_vars"
		if [[ function == $( type -t ${x} ) ]]; then
			${x} ${iface} || return 1
		fi
	done

	if [[ -z ${config_IFACE} ]]; then
		eerror "configuration has not been set!"
		return 1
	fi

	ebegin "Bringing ${iface} up"
	for ((i = 0; i < ${#config_IFACE[@]}; i++)); do
		# Set a label for the alias if $i > 0
		[[ ${i} -eq 0 ]] && label=${iface} || label=${iface}:${i}

		# We convert it to an array - this has the added
		# bonus of trimming spaces!
		conf=( ${config_IFACE[i]} )
		einfo "  ${label} ${conf[0]}"
		
		# Do we have a function for our config?
		if [[ function == $( type -t ${conf[0]}_start ) ]]; then
			${conf[0]}_start ${label} && continue
			if [[ -n ${config_fallback_IFACE[i]} ]]; then
				einfo "    Trying fallback configuration"
				config_IFACE[i]=${config_fallback_IFACE[i]}
				config_fallback_IFACE[i]=''
				(( i = i - 1 )) # since the loop will increment it
			else
				# Only return failure if it was the first address for the interface
				[[ ${i} -eq 0 ]] && return 1
				continue
			fi
		fi

		# We need to test to see if it's an IP address or a function
		# We do this by testing if there is only 1 parameter
		if [[ ${#conf[@]} -eq 1 ]]; then
			eerror "No loaded modules provide \"${conf[0]}\" (${conf[0]}_start)"
			# Only return failure if it was the first address for the interface
			[[ ${i} -eq 0 ]] && return 1
			continue
		fi

		interface_configure ${label} ${conf[@]} && continue
		# Only return failure if it was the first address for the interface
		[[ ${i} -eq 0 ]] && return 1
	done

	# Enabling rp_filter causes wacky packets to be auto-dropped by
	# the kernel.  Note that we only do this if it is not set via
	# /etc/sysctl.conf ...
	if [[ -e /proc/sys/net/ipv4/conf/${iface}/rp_filter && \
			-z "$(grep -s '^[^#]*rp_filter' /etc/sysctl.conf)" ]]; then
		echo -n 1 > /proc/sys/net/ipv4/conf/${iface}/rp_filter
	fi

	# Start any modules with _post_start
	# We do this here as the variables were localised in this function
	for mod in ${MODULES[@]}; do
		if [[ function == $( type -t ${mod}_post_start ) ]]; then
			${mod}_post_start ${iface} || return 1
		fi
	done

	return 0
}

# bool iface_stop(char *interface)
#
# iface_stop: bring down an interface.  Don't trust information in
# /etc/conf.d/net since the configuration might have changed since
# iface_start ran.  Instead query for current configuration and bring
# down the interface.
#
# However, we are currently reliant on handler and modules specified
# in /etc/conf.d/net
iface_stop() {
	local iface=${1} i aliases need_begin=false mod

	ebegin "Bringing ${iface} down"

	# Collect list of aliases for this interface.
	# List will be in reverse order.
	aliases=$( interface_get_aliases_rev ${iface} )
	[[ -n ${aliases} ]] && need_begin=true

	# Stop aliases before primary interface.
	# Note this must be done in reverse order, since ifconfig eth0:1 
	# will remove eth0:2, etc.  It might be sufficient to simply remove 
	# the base interface but we're being safe here.
	for i in ${aliases} ${iface}; do
		# Stop all our modules
		for mod in ${MODULES[@]}; do
			[[ function == $( type -t ${mod}_stop ) ]] && ${mod}_stop ${i} && need_begin=true
		done

		# Delete all the addresses for this alias
		interface_del_addresses ${i}
		# && need_begin=true

		# Do final shut down of this alias
		${need_begin} && einfo "  Stopping ${i}"
		interface_iface_stop ${i}
		eend $?
	done

	return 0
}

# bool start(void)
#
# Brings up ${IFACE}.  Calls preup, iface_start, then postup.
# Returns 0 (success) unless preup or iface_start returns 1 (failure).
# Ignores the return value from postup.
start() {
	local mod
	local -a MODULES

	modules_load ${IFACE}
	eend $?
	[[ 0 != $? ]] && return 1

	if [[ lo == ${IFACE} ]]; then
		ebegin "Bringing ${IFACE} up"
		interface loopback_create
		eend $?
		return $?
	fi

	# Call user-defined preup function if it exists
	if [[ function == $( type -t preup ) ]]; then
		einfo "Running preup function"
		preup ${IFACE} || {
			eerror "preup ${IFACE} failed"
			return 1
		}
	fi

	# pre Start any modules with
	for mod in ${MODULES[@]}; do
		if [[ function == $( type -t ${mod}_pre_start ) ]]; then
			${mod}_pre_start ${IFACE} || return 1
		fi
	done

	# Start the interface
	iface_start ${IFACE} || return 1

	# post Start modules is called in iface_start
	# as that's where the functions get localised
	# and they may have to call iface_start recursively

	# Call user-defined postup function if it exists
	if [[ function == $( type -t postup ) ]]; then
		einfo "Running postup function"
		postup ${IFACE}
	fi

	return 0
}

# bool stop(void)
#
# Brings down ${IFACE}.  If predown call returns non-zero, then
# stop returns non-zero to indicate failure bringing down device.
# In all other cases stop returns 0 to indicate success.
stop() {
	local mod
	local -a MODULES

	modules_load ${IFACE} true || return 1

	# Call user-defined predown function if it exists
	if [[ lo != ${IFACE} && function == $(type -t predown) ]]; then
		einfo "Running predown function"
		predown ${IFACE} || {
			eerror "predown ${IFACE} failed"
			return 1
		}
	fi

	# pre Stop any modules
	for mod in ${MODULES[@]}; do
		[[ function == $( type -t ${mod}_pre_stop ) ]] && ${mod}_pre_stop ${IFACE}
	done

	iface_stop ${IFACE} || return 1  # always succeeds, btw

	# post Stop any modules
	for mod in ${MODULES[@]}; do
		# We have already taken down the interface, so no need to error
		[[ function == $( type -t ${mod}_post_stop ) ]] && ${mod}_post_stop ${IFACE}
	done

	# Call user-defined postdown function if it exists
	if [[ lo != ${IFACE} && $(type -t postdown) == function ]]; then
		einfo "Running postdown function"
		postdown ${IFACE}
	fi

	return 0
}

# vim:ts=4
