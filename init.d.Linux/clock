#!/sbin/runscript
# Copyright 1999-2007 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2

opts="save show"

description="Sets the local clock to UTC or Local Time." 
description_save="Saves the current time in the BIOS."

depend() {
	if [ "${CLOCK_ADJFILE}" = "yes" ]; then
		use checkroot
	else
		before *
	fi
}

setupopts() {
	utc=
	case "${RC_SYS}" in
		UML|VPS|XEN)
			TBLURB="${RC_SYS}"
			;;
		*)
			case "$(uname -m)" in
				s390*)
					TBLURB="s390"
					;;
				*)
					if [ -e /proc/devices ] && grep -q " cobd$" /proc/devices ; then
						TBLURB="coLinux"
					elif [ "${CLOCK}" = "UTC" ] ; then
						utc="--utc"
						TBLURB="UTC"
					else
						utc="--localtime"
						TBLURB="Local Time"
					fi
					;;
			esac
			;;
	esac
	[ -n "${utc}" ] || return 0
	
	# Make sure user isn't using rc.conf anymore.
	if [ -e /etc/rc.conf ] && \
	[ -n "$(unset CLOCK; . /etc/rc.conf; echo "${CLOCK}")" ] ; then
		ewarn "CLOCK should not be set in /etc/rc.conf but in /etc/conf.d/clock"
	fi

	# Make sure people set their timezone ... we do it here
	# even though we don't actually use the variable so that
	# people see the warning on boot.
	if [ -z "${CDBOOT}" -a "${TIMEZONE-Factory}" = "Factory" ] ; then
		ewarn "Your TIMEZONE in /etc/conf.d/clock is still set to Factory!"
	fi
}

start() {
	local utc= TBLURB= errstr="" retval=0
	
	setupopts

	ebegin "Setting system clock using the hardware clock [${TBLURB}]"
	if [ -n "${utc}" ]; then
		if [ -e /proc/modules -a ! -e /dev/rtc ] ; then
			modprobe -q rtc || modprobe -q genrtc
		fi

		# Since hwclock always exit's with a 0, need to check its output.
		if [ -e /etc/adjtime -a "${CLOCK_ADJFILE}" = "yes" ]; then
			errstr="$(hwclock --adjust ${utc} 2>&1 >/dev/null)"
		fi
		# If setting UTC, don't bother to run hwclock when first booting
		# as that's the default
		if [ "${PREVLEVEL}" != "N" -o "${utc}" != "--utc" -o -n "${CLOCK_OPTS}" ]; then
			errstr="${errstr}$(hwclock --hctosys ${utc} ${CLOCK_OPTS} 2>&1 >/dev/null)"
		fi
	fi
	if [ -n "${errstr}" ]; then
		ewarn "${errstr}"
		retval=1
	fi
	errstr="Failed to set clock"
	eend ${retval} "${errstr}" "You will need to set the clock yourself"

	return 0
}

stop() {
	# Don't tweak the hardware clock on LiveCD halt.
	[ -n "${CDBOOT}" -o "${CLOCK_SYSTOHC}" != "yes" ] && return 0

	local utc= TBLURB= errstr="" retval=0

	setupopts

	ebegin "Setting hardware clock using the system clock" "[${TBLURB}]"
	if [ -n "${utc}" ]; then
		if [ "${CLOCK_ADJFILE}" != "yes" ]; then
			# If we have adjtimex then we're probably busybox
			if ! type adjtimex >/dev/null 2>&1; then
				utc="${utc} --noadjfile"
			fi
		fi
		errstr="$(LC_ALL=C hwclock --systohc ${utc} ${CLOCK_OPTS} 2>&1 >/dev/null)"
	fi
	if [ -n "${errstr}" ] ; then
		ewarn "${errstr}"
		retval=1
	fi
	errstr="Failed to sync clocks"
	eend ${retval} "${errstr}"
}

save() {
	CLOCK_SYSTOHC="yes"
	stop
}

show() {
	local utc= TBLURB=
	setupopts
	/sbin/hwclock --show "${utc}" ${CLOCK_OPTS}
}

# vim: set ts=4 :
